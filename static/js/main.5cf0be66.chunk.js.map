{"version":3,"sources":["Output/index.js","App.js","serviceWorker.js","index.js"],"names":["Output","props","daysDeclination","days","weeksDeclination","weeks","state","this","className","React","Component","App","getInputDate","date","converting","split","convertedDate","join","setState","inputDate","document","getElementById","classList","remove","timeUntil","currentDate","convertedCurrentDate","Date","convertedInputDate","Math","floor","getTime","add","time","showOutput","intervalID","setInterval","tick","clearInterval","converted","toLocaleDateString","id","htmlFor","type","name","onChange","event","target","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cf0be66.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\nclass Output extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  daysDeclination = (days) => {\r\n    if (days === 0) return 'To już dziś!';\r\n    else if (days === 1) return 'Pozostał ' + days + ' dzień';\r\n    else if (days >= 2) return 'Pozostało ' + days + ' dni';\r\n    else if (days < 0) return 'Wybierz datę z przyszłości';\r\n  };\r\n\r\n  weeksDeclination = (weeks) => {\r\n    if (weeks === 0) return 'To już w tym tygodniu!';\r\n    else if (weeks === 1) return 'Pozostał ' + weeks + ' tydzień';\r\n    else if (weeks >= 2 && weeks <5) return 'Pozostały ' + weeks + ' tygodnie';\r\n    else if (weeks >= 5) return 'Pozostało ' + weeks + ' tygodni';\r\n    else if (weeks < 0 )  return 'Wybierz datę z przyszłości';\r\n  };\r\n\r\n  render() {\r\n    const {weeks, days} = this.props;\r\n    return (\r\n      <div className=\"content\">\r\n        <p className=\"days\">{this.daysDeclination(days)}</p>\r\n        <p className=\"weeks\">{this.weeksDeclination(weeks)}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React from 'react';\nimport './App.css';\nimport Output from './Output';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: '',\n      inputDate: '',\n      days: 0,\n      weeks: 0,\n      showOutput: false\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    let currentDate = new Date().toLocaleDateString();\n    let converted = currentDate.split(/\\D/g);\n    converted = [converted[0],converted[1],converted[2]].join(\"/\");\n    this.setState({\n      time: converted\n    });\n  }\n\n  getInputDate = (date) => {\n    let converting = date.split(/\\D/g);\n    let convertedDate = [converting[2],converting[1],converting[0]].join(\"/\");\n    this.setState({\n      inputDate: convertedDate,\n    });\n    let content = document.getElementById('container');\n    content.classList.remove('pulse');\n  };\n\n  timeUntil = (currentDate, inputDate) => {\n    let convertedCurrentDate = new Date(currentDate.split('/')[2],currentDate.split('/')[1]-1,currentDate.split('/')[0]);\n    let convertedInputDate = new Date(inputDate.split('/')[2],inputDate.split('/')[1]-1,inputDate.split('/')[0]);\n    let days = Math.floor((convertedInputDate.getTime() - convertedCurrentDate.getTime()) / (1000 * 3600 * 24));\n    let weeks = Math.floor(days/7);\n    this.setState({\n      days: days,\n      weeks: weeks\n    });\n\n    let content = document.getElementById('container');\n    content.classList.add('pulse');\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <div id=\"container\" className=\"container\">\n            <label className=\"label\" htmlFor=\"date\">Wpisz datę wydarzenia:</label>\n            <input\n              className=\"input\"\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              onChange={(event) => this.getInputDate(event.target.value)}\n            />\n            {this.state.inputDate !== '' ?\n              <button\n                className=\"button\"\n                onClick={() => {\n                  this.timeUntil(this.state.time, this.state.inputDate);\n                  this.setState({showOutput: true});\n                }}>Oblicz\n              </button> :\n              <button\n                className=\"button invisible\"\n                onClick={() => {\n                  this.timeUntil(this.state.time, this.state.inputDate);\n                  this.setState({showOutput: true})\n                }}>Oblicz\n              </button>\n              }\n          </div>\n          {this.state.showOutput ? <Output weeks = {this.state.weeks} days = {this.state.days} /> : null}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}